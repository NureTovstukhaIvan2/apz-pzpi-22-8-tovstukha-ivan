МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ


Кафедра «Програмної інженерії»





ЗВІТ
З лабораторної роботи №2 
з дисципліни
«Архітектура програмного забезпечення»




Виконав:	Перевірив
ст. гр. ПЗПІ-22-8	ст. викладач каф. ПІ
Товстуха Іван	Сокорчук І. П.

















Харків 2025
1 ІСТОРІЯ ЗМІН
     
          У цьому розділі представлено історію внесених змін до звіту, що наведено у табл. 1.
     
№
Дата
Версія звіту
Опис змін та виправлень
1
13.05.2025
0.1
Створено розділ «Історія змін»
2
13.05.2025
0.1
Створено розділ «Завдання»
3
13.05.2025
0.1
Створено розділ «Опис виконаної роботи»
4
13.05.2025
0.1
Створено розділ «Висновки»
5
13.05.2025
0.1
Додано додаток А з посиланням на відеоролик
6
14.05.2025
0.1
Додано додаток Б з графічними матеріалами
7
14.05.2025
0.1
Додано додаток В з програмним кодом
8
14.05.2025
0.1
Додано додаток Г з специфікацію REST

2 ЗАВДАННЯ
     
     Метою лабораторної роботи є розширення функціональності системи моніторингу акваріумів шляхом впровадження багатомовного інтерфейсу та вдосконалення бізнес-логіки. Необхідно проаналізувати існуючу архітектуру системи, розробити та реалізувати механізми інтернаціоналізації для підтримки української та англійської мов, що дозволить зробити систему доступнішою для міжнародних користувачів. Розширення серверної частини передбачає впровадження i18n-механізмів та модернізацію API для обробки запитів з урахуванням мовних налаштувань. Бізнес-логіка системи вдосконалюється шляхом додавання розширеної аналітики параметрів акваріумів, включаючи прогнозування стану водного середовища на основі історичних даних. Математичні моделі аналізу доповнюються новими алгоритмами, зокрема, реалізується функціонал для передбачення змін основних параметрів води (температури, рівня кисню, pH) на основі поточних показників та тенденцій їх зміни. Це дозволить системі не лише фіксувати поточний стан, але й прогнозувати потенційні проблеми, запобігаючи критичним ситуаціям у акваріумах.
     
     

3 ОПИС ВИКОНАНОЇ РОБОТИ
     
     У цьому розділі представлено аналіз існуючих компонентів системи моніторингу акваріумів та запропоновано шляхи її розширення. Графічні матеріали (діаграми) наведено у додатках. Система моніторингу акваріумів реалізована на основі сучасної багаторівневої архітектури, яка забезпечує чітке розділення відповідальності між компонентами. Архітектура системи складається з кількох основних рівнів: рівень представлення, що представлений React-додатком з інтуїтивно зрозумілим інтерфейсом; рівень API, який реалізовано за допомогою Node.js та Express і який забезпечує RESTful API для взаємодії клієнта з сервером; рівень бізнес-логіки, що включає сервіси для обробки даних та аналітики; а також рівень зберігання даних, реалізований на основі реляційної бази даних MySQL.
     
     3.1 Компоненти серверної частини
     
     Система реалізує RESTful API на базі Node.js та Express, що забезпечує надійну взаємодію з клієнтським додатком. Основні контролери системи включають:
* Auth – відповідає за автентифікацію та авторизацію користувачів;
* Users – забезпечує управління користувачами системи;
* Aquariums – керує даними про акваріуми;
* Devices – відповідає за взаємодію з пристроями моніторингу;
* SensorReadings – обробляє дані з сенсорів.
     Основні моделі бази даних включають:
* Users – інформація про користувачів системи (ролі: ADMIN, MANAGER, USER);
* Aquariums – дані про акваріуми (назва, об'єм, параметри);
* Devices – інформація про пристрої моніторингу (термостати, аератори, pH-контролери);
* SensorReadings – історичні дані показників сенсорів.
     Як база даних використовується MySQL, яка містить нормалізовані таблиці для зберігання всієї необхідної інформації. ER-діаграма бази даних представлена у додатку Б.
     
     3.2 Бізнес-логіка системи
     
Моніторинг параметрів води:
* Температура (оптимальний діапазон: 22-28°C);
* Рівень кисню (оптимальний діапазон: 7-9 мг/л);
* Рівень pH (оптимальний діапазон: 6.5-8.5).
Автоматичне керування пристроями:
* Термостати для підтримки температури;
* Аератори для регулювання рівня кисню;
* pH-контролери для стабілізації кислотності.
Система сповіщень:
* Попередження при виході параметрів за межі норми;
* Рекомендації щодо корекції умов.
     
     3.3 Розширення системи
     3.3.1 Впровадження багатомовності
     
     Для підтримки української та англійської мов було реалізовано інтернаціоналізацію (i18n) з використанням бібліотеки react-i18next. Основний функціонал:
* Динамічна зміна мови інтерфейсу;
* Локалізація всіх текстових елементів;
* Підтримка форматування дат та чисел;
* Можливість легкого додавання нових мов.
     

     3.3.2 Розширення аналітичних функцій
     
Візуалізація даних:
* Графіки зміни параметрів у часі;
* Інтерактивні діаграми;
* Історичні звіти.
Система рекомендацій:
* Автоматичні поради щодо підтримки оптимальних умов;
* Попередження про потенційні проблеми;
* Рекомендації щодо обслуговування обладнання.
Розширена аналітика:
* Розрахунок стабільності параметрів;
* Визначення трендів;
* Прогнозування можливих змін.
     
     3.3.3 Математичні методи обробки даних
     
     Для аналітичної обробки параметрів акваріумів запроваджено систему математичних моделей:
     
     1. Нормалізаційні функції параметрів
     Температура (T):
     Nₜ = 1 - (|Tᶜ - Tⁱ| / ΔT)
     де:
* Nₜ ∈ [0,1] - нормований показник температури;
* Tᶜ - поточне значення температури (°C);
* Tⁱ - ідеальне значення (°C);
* ΔT - допустимий діапазон (°C).


     2. Рівень кисню (O):
     Nₒ = 1 - (|Oᶜ - Oⁱ| / ΔO)
     де:
* Nₒ ∈ [0,1] - нормований показник кисню;
* Oᶜ - поточний рівень (мг/л);
* Oⁱ - ідеальний рівень (мг/л);
* ΔO - допустимий діапазон (мг/л).

     3. Рівень pH (P):
     Nₚ = 1 - (|Pᶜ - Pⁱ| / ΔP)
     де:
* Nₚ ∈ [0,1] - нормований показник pH;
* Pᶜ - поточне значення;
* Pⁱ - ідеальне значення;
* ΔP - допустимий діапазон.

     4. Індекс стабільності:
     S = 1 - (σ/μ)
     де:
* σ - стандартне відхилення;
* μ - середнє значення.



3 ВИСНОВОК

     В результаті виконаної роботи було успішно розширено функціональність системи моніторингу акваріумів за рахунок впровадження сучасних математичних методів обробки даних. Розроблена система нормалізації параметрів та інтегрального оцінювання стану акваріума дозволяє отримувати точні кількісні оцінки якості води, враховуючи взаємозв'язок між температурою, рівнем кисню та кислотністю. Використання методів аналізу часових рядів, включаючи ковзне середнє та лінійну регресію, дає змогу не лише фіксувати поточний стан, але й виявляти потенційно небезпечні тренди на ранніх етапах. 
     Реалізована система попереджень на основі прогнозування швидкості зміни параметрів значно підвищує надійність моніторингу та запобігає критичним ситуаціям. Впровадження індексу стабільності дозволяє оцінювати ефективність роботи обладнання та приймати обґрунтовані рішення щодо його обслуговування. Розширена версія системи забезпечує більш глибокий аналіз стану акваріумів, автоматизацію прийняття рішень та покращену візуалізацію даних, що робить її ефективним інструментом як для любителів, так і для професійних акваріумістів. 
     Впровадження цих покращень суттєво підвищує точність моніторингу, зменшує ризик втрати мешканців акваріумів та сприяє підтриманню оптимальних умов для їх життєдіяльності.
     

ДОДАТОК А
Відеозапис

Відеозапис презентації результатів лабораторної роботи: https://youtu.be/el5NfsgyUSI
Хронологічний опис відеозапису:
00:00 - Вступ 
00:10 - Тестування авторизації 
01:14 - Тестування взаємодії з акваріумами 
02:20 - Тестування взаємодії з пристроями 
04:05 - Тестування взаємодії з сенсорами 
05:12 - Тестування взаємодії з логами
     

ДОДАТОК Б
Графічні матеріали


Рисунок Б.1 – UML діаграма розгортання


Рисунок Б.2 – Структура бази даних


Рисунок Б.3 – UML діаграма прецедентів


Рисунок Б.4 – UML діаграма діяльності для серверної частини


Рисунок Б.5 – ER-модель даних


ДОДАТОК В
Програмний код

В.1 Математична обробка прикладних даних
GitHub репозиторій: https://github.com/NureTovstukhaIvan2/apz-pzpi-22-8-tovstukha-ivan/tree/main/Lab2/pzpi-22-8-tovstukha-ivan-lab2/ components/AquariumCard.js
1  import React from 'react';
2  import { Card, Badge, Button } from 'react-bootstrap';
3  import { Link } from 'react-router-dom';
4  import { useTranslation } from 'react-i18next';
5  
6  const AquariumCard = ({ aquarium, canEdit, t }) => {
7    // Математичні розрахунки для визначення стану параметрів
8    const getParamStatus = (value, min, max) => {
9      return value < min || value > max ? 'danger' : 'success';
10   };
11 
12   const latestReading = aquarium.readings?.[0] || null;
13 
14   return (
15     <Card className="mb-3">
16       <Card.Body>
17         <Card.Title>
18           {aquarium.name}
19           {canEdit && (
20             <Button variant="outline-primary" size="sm" className="float-end" as={Link} to={`/aquariums/${aquarium.id}`}>
21               {t('edit')}
22             </Button>
23           )}
24         </Card.Title>
25         <Card.Subtitle className="mb-2 text-muted">
26           {t('volume')}: {aquarium.volume} {t('liters')}
27         </Card.Subtitle>
28         
29         {latestReading && (
30           <div className="mb-2">
31             <Badge 
32               bg={getParamStatus(latestReading.temperature, 22, 28)} 
33               className="me-2"
34             >
35               {t('temperature')}: {latestReading.temperature}°C
36             </Badge>
37             <Badge 
38               bg={getParamStatus(latestReading.oxygen_level, 6, 9)} 
39               className="me-2"
40             >
41               O₂: {latestReading.oxygen_level} {t('mgL')}
42             </Badge>
43             <Badge 
44               bg={getParamStatus(latestReading.ph_level, 6.5, 8.5)}
45             >
46               {t('ph')}: {latestReading.ph_level}
47             </Badge>
48           </div>
49         )}
50       </Card.Body>
51     </Card>
52   );
53 };
54 
55 export default AquariumCard;


В.2 Адміністрування бізнес-логіки системи
GitHub репозиторій: https://github.com/NureTovstukhaIvan2/apz-pzpi-22-8-tovstukha-ivan/tree/main/Lab2/pzpi-22-8-tovstukha-ivan-lab2/ controllers/ aquarium.controller.js
1   const db = require("../models");
2   const Aquarium = db.aquarium;
3   const Device = db.device;
4   const SensorReading = db.sensorReading;
5   
6   exports.create = (req, res) => {
7     if (!req.body.name || !req.body.volume) {
8       return res.status(400).send({ message: "Name and volume are required!" });
9     }
10  
11    const aquarium = {
12      name: req.body.name,
13      volume: req.body.volume
14    };
15  
16    Aquarium.create(aquarium)
17      .then(data => {
18        // Автоматичне створення стандартних пристроїв
19        const devices = [
20          { type: 'THERMOSTAT', name: 'Default Thermostat', status: 'ACTIVE' },
21          { type: 'AERATOR', name: 'Default Aerator', status: 'ACTIVE' },
22          { type: 'PH_CONTROLLER', name: 'Default pH Controller', status: 'ACTIVE' }
23        ];
24  
25        devices.forEach(device => {
26          Device.create({
27            aquariumId: data.id,
28            ...device
29          });
30        });
31  
32        res.send(data);
33      })
34      .catch(err => {
35        res.status(500).send({
36          message: err.message || "Error creating aquarium."
37        });
38      });
39  };
40  
41  exports.addSensorReading = (req, res) => {
42    const aquariumId = req.params.aquariumId;
43    
44    // Валідація вхідних даних
45    if (!req.body.temperature || !req.body.oxygen_level || !req.body.ph_level) {
46      return res.status(400).send({ message: "All parameters are required!" });
47    }
48  
49    // Бізнес-логіка: автоматична корекція статусу пристроїв
50    Device.update(
51      { status: 'MAINTENANCE' },
52      { 
53        where: { 
54          aquariumId: aquariumId,
55          status: 'ACTIVE'
56        } 
57      }
58    );
59  
60    SensorReading.create({
61      aquariumId: aquariumId,
62      temperature: req.body.temperature,
63      oxygen_level: req.body.oxygen_level,
64      ph_level: req.body.ph_level
65    })
66      .then(reading => {
67        res.send(reading);
68      })
69      .catch(err => {
70        res.status(500).send({ message: err.message });
71      });
 72  };


В.3 Резервне копіювання користувацьких даних
GitHub репозиторій: https://github.com/NureTovstukhaIvan2/apz-pzpi-22-8-tovstukha-ivan/tree/main/Lab2/pzpi-22-8-tovstukha-ivan-lab2/ utils/backup.js
1   const fs = require('fs');
2   const path = require('path');
3   const { Sequelize } = require('sequelize');
4   const config = require('../config/db.config.js');
5   
6   const backupDatabase = async () => {
7     const sequelize = new Sequelize(config.DB, config.USER, config.PASSWORD, {
8       host: config.HOST,
9       dialect: config.dialect,
10      logging: false
11    });
12  
13    try {
14      const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
15      const backupDir = path.join(__dirname, '../../backups');
16      const backupPath = path.join(backupDir, `backup-${timestamp}.sql`);
17  
18      if (!fs.existsSync(backupDir)) {
19        fs.mkdirSync(backupDir, { recursive: true });
20      }
21  
22      const result = await sequelize.query(
23        'SELECT * INTO OUTFILE ? FROM aquariums UNION ALL ' +
24        'SELECT * INTO OUTFILE ? FROM devices UNION ALL ' +
25        'SELECT * INTO OUTFILE ? FROM sensor_readings UNION ALL ' +
26        'SELECT * INTO OUTFILE ? FROM users UNION ALL ' +
27        'SELECT * INTO OUTFILE ? FROM user_aquariums',
28        {
29          replacements: [
30            backupPath.replace('.sql', '-aquariums.sql'),
31            backupPath.replace('.sql', '-devices.sql'),
32            backupPath.replace('.sql', '-readings.sql'),
33            backupPath.replace('.sql', '-users.sql'),
34            backupPath.replace('.sql', '-user_aq.sql')
35          ]
36        }
37      );
38  
39      console.log(`Backup created successfully at ${backupPath}`);
40      return true;
41    } catch (error) {
42      console.error('Backup failed:', error);
43      return false;
44    } finally {
45      await sequelize.close();
46    }
47  };
48  
 49  module.exports = { backupDatabase };


В.4 Локалізація тексту
GitHub репозиторій: https://github.com/NureTovstukhaIvan2/apz-pzpi-22-8-tovstukha-ivan/tree/main/Lab2/pzpi-22-8-tovstukha-ivan-lab2/ utils/ i18n.js
1   import i18n from 'i18next';
2   import { initReactI18next } from 'react-i18next';
3   
4   const resources = {
5     en: {
6       translation: {
7         "aquariumMonitoring": "Aquarium Monitoring",
8         "temperatureStatus": "Temperature: {{value}}°C ({{status}})",
9         "paramStatus": {
10          "optimal": "optimal",
11          "critical": "critical",
12          "warning": "warning"
13        }
14      }
15    },
16    ua: {
17      translation: {
18        "aquariumMonitoring": "Моніторинг акваріумів",
19        "temperatureStatus": "Температура: {{value}}°C ({{status}})",
20        "paramStatus": {
21          "optimal": "оптимально",
22          "critical": "критично",
23          "warning": "попередження"
24        }
25      }
26    }
27  };
28  
29  i18n
30    .use(initReactI18next)
31    .init({
32      resources,
33      lng: 'en',
34      fallbackLng: 'en',
35      interpolation: {
36        escapeValue: false,
37        format: (value, format, lng) => {
38          if (format === 'status') {
39            const status = value < 22 ? 'critical' : 
40                          value > 28 ? 'warning' : 'optimal';
41            return i18n.t(`paramStatus.${status}`);
42          }
43          return value;
44        }
45      }
46    });
47  
 48  export default i18n;


ДОДАТОК Г
Специфікація розробленого REST API

Таблиця Г.1 – Маршрут /api/Users/
Метод
Маршрут
Опис
POST
/users/register
Реєстрація нового користувача
POST
/users/login
Авторизація користувача
GET
/users
Отримання списку всіх
користувачів
GET
/users/{id}
Отримання даних про
користувача за його ID
PUT
/users/{id}
Оновлення інформації про
користувача
DELETE
/users/{id}
Видалення користувача за його
ID

Таблиця Г.2 – Маршрут /api/ Aquariums/
Метод
Маршрут
Опис
POST
/aquariums
Додавання нового акваріума
GET
/aquariums
Отримання списку всіх
акваріумів
GET
/aquariums/user/{userId}
Отримання списку акваріумів
для конкретного користувача
GET
/aquariums/{id}
Отримання інформації про
акваріум за його ID
PUT
/aquariums/{id}
Оновлення інформації про
акваріум
DELETE
/aquariums/{id}
Видалення акваріума за його ID


Таблиця Г.3 – Маршрут /api/ Devices/
Метод
Маршрут
Опис
POST
/devices
Додавання нового пристрою
GET
/devices
Отримання списку всіх
пристроїв
GET
/devices/aquarium/{aquariumId}
Отримання списку пристроїв
для конкретного акваріума
GET
/devices/{id}
Отримання інформації про
пристрій за його ID
PUT
/devices/{id}
Оновлення інформації про
пристрій
DELETE
/devices/{id}
Видалення пристрою за його ID

Таблиця Г.4 – Маршрут /api/ Sensors/
Метод
Маршрут
Опис
POST
/sensors
Додавання нового сенсора
GET
/sensors
Отримання списку всіх сенсорів
GET
/sensors/aquarium/{aquariumId}
Отримання списку сенсорів для
конкретного акваріума
GET
/sensors/{id}
Отримання інформації про
сенсор за його ID
PUT
/sensors/{id}
Оновлення інформації про
сенсор
DELETE
/sensors/{id}
Видалення сенсора за його ID

Таблиця Г.5 – Маршрут /api/ Logs/
Метод
Маршрут
Опис
POST
/logs
Додавання нового логу
GET
/logs
Отримання списку всіх логів
GET
/logs/sensor/{sensorId}
Отримання списку логів для
конкретного сенсора
GET
/logs/{id}
Отримання конкретного логу за
його ID
DELETE
/logs/{id}
Видалення конкретного логу
DELETE
/logs/sensor/{sensorId}
Видалення всіх логів для
конкретного сенсора

2


