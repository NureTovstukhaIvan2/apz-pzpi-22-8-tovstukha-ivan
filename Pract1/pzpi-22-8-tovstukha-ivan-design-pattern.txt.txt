МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ


Кафедра програмної інженерії




Практична робота №1
з дисципліни
«Архітектура програмного забезпечення»






Виконав:                                                                                                  Перевірив                      
ст. гр. ПЗПІ-22-8                                                                      ст. викладач каф. ПІ
Товстуха Іван                                                                                     Сокорчук І. П.










Харків 2025
1 ІСТОРІЯ ЗМІН

№ДатаВерсія звітуОпис змін та виправлень124.03.20250.1Створено розділ «Історія змін»224.03.20250.1Створено розділ «Завдання до практичної роботи»324.03.20250.1Створено розділ «Опис виконаної роботи»424.03.20250.1Створено розділ «Висновки»524.03.20250.1Додано додаток А з посиланням на відеоролик624.03.20250.1Додано додаток Б зі слайдами презентації724.03.20250.1Додано додаток В з програмним кодомТаблиця 1 - Історія змін



2 ЗАВДАННЯ

     У рамках цієї практичної роботи з дисципліни «Архітектура програмного забезпечення» було поставлено завдання дослідити патерн проєктування "Factory Method" (Фабричний метод). Метою роботи було глибоко вивчити сутність цього патерну, його структуру та застосування в реальних проєктах програмного забезпечення. Завдання включало вивчення теоретичних основ патерну, аналіз його переваг та недоліків, а також дослідження прикладів використання в різних сферах програмування. 

     Окрім того, необхідно було з'ясувати, як фабричний метод може покращити гнучкість і масштабованість систем, а також як він взаємодіє з іншими патернами проектування.
     
     
     
3 ОПИС ВИКОНАНОЇ РОБОТИ

     Під час роботи було здійснено детальний аналіз патерну "Factory Method", який є одним з найбільш популярних породжувальних патернів у програмуванні. Основною ідеєю фабричного методу є те, що процес створення об'єктів інкапсулюється в окремому методі, який надається базовим класом або інтерфейсом. Це дозволяє підкласам змінювати типи створюваних об'єктів без необхідності змінювати код, що використовує ці об'єкти. Така організація коду надає значну гнучкість і полегшує підтримку програм, оскільки зміни в типах об'єктів, що створюються, не потребують змін у всіх місцях, де ці об'єкти використовуються.
     Аналіз структури фабричного методу показав, що він складається з кількох основних компонентів: абстрактного класу або інтерфейсу Creator, який визначає фабричний метод, конкретного класу ConcreteCreator, що реалізує цей метод для створення об'єктів, абстрактного класу Product для опису спільних властивостей і методів усіх об'єктів, та конкретних класів ConcreteProduct, які реалізують ці методи для конкретних типів об'єктів. Така структура дозволяє централізувати процес створення об'єктів, що в свою чергу дає можливість змінювати типи об'єктів без зміни клієнтського коду.
     Одним із головних переваг фабричного методу є його здатність покращити масштабованість та гнучкість програмних систем. Завдяки тому, що створення об'єктів делегується фабричним методам, можна легко додавати нові типи об'єктів без необхідності переписувати вже існуючий код. 

     Це забезпечує можливість підтримки великих проєктів і дозволяє розширювати функціональність системи без значних змін у її основному коді.
     Водночас було розглянуто й деякі недоліки цього патерну. Одним з них є ускладнення структури програми, оскільки для кожного нового типу об'єкта потрібно створювати окремі фабричні класи, що може призвести до значного збільшення кількості класів в системі. Крім того, сильна прив'язка фабрики до коду клієнта може ускладнити адаптацію системи до нових вимог або зміну способу створення об'єктів без необхідності переписувати значну частину коду.
     Приклади застосування фабричного методу включають різні реальні проєкти, де необхідно створювати об'єкти різних типів без прив'язки коду до конкретних класів. Це включає ігрові движки, графічні бібліотеки та системи управління базами даних. В усіх цих випадках фабричний метод дозволяє централізовано управляти створенням об'єктів, що значно полегшує підтримку і розширення систем.



4 ВИСНОВКИ З РОБОТИ

     Під час виконання роботи було детально розібрано патерн проєктування "Factory Method" та його застосування в реальних програмних системах. Фабричний метод є ефективним інструментом для створення гнучких, масштабованих і розширюваних систем. Його застосування дозволяє централізувати процес створення об'єктів, що значно підвищує зручність підтримки та розвитку програм. Однак, варто враховувати й деякі недоліки цього патерну, такі як ускладнення структури коду та сильна прив'язка фабрики до клієнтського коду.
     В цілому, фабричний метод є потужним інструментом для розробки систем, що потребують високої гнучкості і масштабованості, і його використання допомагає значно спростити розробку і підтримку великих програмних систем.


     ДОДАТОК А
     Відеозапис доповіді на YouTube: https://youtu.be/MYOZcGLQcdQ
     00:00 Вступ: 
     00:11 Призначення патерну Factory Method: 
     01:06 Структура патерну Factory Method: 
     02:21 Реалізація патерну Factory Method: 
     03:32 Переваги патерну Factory Method: 
     04:54 Недоліки патерну Factory Method: 
     06:18 Приклади використання патерну Factory Method: 
     07:30 Відносини патерну Factory Method з іншими патернами: 
     09:36 Висновки щодо використання патерну Observer:
     
     ДОДАТОК Б
     Слайди презентації доповіді
     
     

Рисунок Б.1 – Титульний слайд презентації



Рисунок Б.2 – Призначення патерну Factory Method



Рисунок Б.3 – Структура патерну Factory Method



Рисунок Б.4 – Реалізація патерну Factory Method



Рисунок Б.5 – Переваги патерну Factory Method



Рисунок Б.6 – Недоліки патерну Factory Method



Рисунок Б.7 – Приклади використання патерну Factory Method



Рисунок Б.8 – Відносини патерну Factory Method з іншими патернами



Рисунок Б.9 – Висновки щодо використання патерну Observer


     ДОДАТОК В
     Програмний код
     
     1. # Клас для логістичних компаній
     2. class Logistics:
     3.     def create_transport(self):
     4.         pass
     5. 
     6. # Конкретна компанія для автомобільних перевезень
     7. class RoadLogistics(Logistics):
     8.     def create_transport(self):
     9.         return "Автомобіль для перевезення вантажів"
     10. 
     11. # Конкретна компанія для морських перевезень
     12. class SeaLogistics(Logistics):
     13.     def create_transport(self):
     14.         return "Корабель для перевезення вантажів"
     15. 
     16. # Фабричний метод для створення логістичної компанії
     17. def logistics_factory(type):
     18.     if type == "road":
     19.         return RoadLogistics()
     20.     elif type == "sea":
     21.         return SeaLogistics()
     22.     else:
     23.         raise ValueError("Невідомий тип логістики")
     24. 
     25. # Приклад використання для різних типів логістики
     26. logistics_types = ["road", "sea"]
     27. for logistics_type in logistics_types:
     28.     logistics = logistics_factory(logistics_type)
     29.     transport = logistics.create_transport()
     30.     print(f"Тип логістики: {logistics_type} - Створено транспорт: {transport}")
